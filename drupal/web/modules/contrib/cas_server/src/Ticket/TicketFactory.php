<?php

/**
 * @file
 * Contains Drupal\cas_server\Ticket\TicketFactory
 */

namespace Drupal\cas_server\Ticket;

use Drupal\cas_server\Event\CasServerTicketAlterEvent;
use Drupal\Component\Utility\Crypt;
use Drupal\cas_server\Configuration\ConfigHelper;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Session\SessionManagerInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;


class TicketFactory {

  /**
   * @var TicketStorageInterface
   *
   * The ticket store.
   */
  protected $ticketStore;

  /**
   * @var ConfigHelper
   *
   * The configuration helper.
   */
  protected $configHelper;

  /**
   * @var SessionManagerInterface
   *
   * The session manager.
   */
  protected $sessionManager;

  /**
   * Event dispatcher.
   *
   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
   */
  protected $eventDispatcher;

  /**
   * The time service
   *
   * @var \Drupal\Component\Datetime\TimeInterface
   */
  protected $time;

  /**
   * Constructor.
   *
   * @param TicketStorageInterface $ticket_store
   *   The ticket store to use.
   * @param ConfigHelper $config_helper
   *   The configuration helper.
   */
  public function __construct(TicketStorageInterface $ticket_store, ConfigHelper $config_helper, SessionManagerInterface $session_manager, EventDispatcherInterface $event_dispatcher) {
    $this->ticketStore = $ticket_store;
    $this->configHelper = $config_helper;
    $this->sessionManager = $session_manager;
    $this->eventDispatcher = $event_dispatcher;
    $this->time = \Drupal::time();
  }

  /**
   * Create a proxy granting ticket.
   *
   * @param array $proxy_chain
   *   The proxy chain.
   *
   * @return ProxyGrantingTicket
   *   The created and saved PGT.
   */
  public function createProxyGrantingTicket($proxy_chain) {
    $id = 'PGT-';
    $id .= Crypt::randomBytesBase64(32);
    $expiration_time = $this->time->getRequestTime() + $this->configHelper->getProxyGrantingTicketTimeout();
    $session = Crypt::hashBase64($this->sessionManager->getId());
    $uid = \Drupal::currentUser()->id();
    $name = $this->getUsernameAttribute(\Drupal::currentUser());

    $pgt = new ProxyGrantingTicket($id, $expiration_time, $session, $uid, $name, $proxy_chain);
    $event = new CasServerTicketAlterEvent($pgt);
    $this->eventDispatcher->dispatch(CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT, $event);
    $this->ticketStore->storeProxyGrantingTicket($pgt);

    return $pgt;

  }

  /**
   * Create a service ticket.
   *
   * @param string $service_string
   *   The service the ticket is being issued for.
   * @param bool $renew
   *   Whether or not this ticket was generated by directly supplied credentials.
   *
   * @return ServiceTicket
   *   The created and saved ServiceTicket.
   */
  public function createServiceTicket($service_string, $renew) {
    $id = 'ST-';
    $id .= Crypt::randomBytesBase64(32);
    $expiration_time = $this->time->getRequestTime() + $this->configHelper->getServiceTicketTimeout();
    $session = Crypt::hashBase64($this->sessionManager->getId());
    $uid = \Drupal::currentUser()->id();
    $name = $this->getUsernameAttribute(\Drupal::currentUser());

    $st = new ServiceTicket($id, $expiration_time, $session, $uid, $name, $service_string, $renew);
    $event = new CasServerTicketAlterEvent($st);
    $this->eventDispatcher->dispatch(CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT, $event);
    $this->ticketStore->storeServiceTicket($st);

    return $st;
  }

  /**
   * Create a proxy ticket.
   *
   * @param string $service_string
   *   The service the ticket is being issued for.
   * @param bool $renew
   *   Whether or not this ticket was generated by directly supplied credentials.
   * @param array $proxy_chain
   *   The proxy chain.
   * @param string $session
   *   The session ID of the session who originally requested the requesting pgt.
   * @param int $uid
   *   The uid of the of user who originally requested the pgt.
   * @param string $name
   *   The username of the user who originally requested the requesting pgt.
   *
   * @return ProxyTicket
   *   The created and saved ProxyTicket.
   */
  public function createProxyTicket($service_string, $renew, $proxy_chain, $session, $uid, $name) {
    $id = 'PT-';
    $id .= Crypt::randomBytesBase64(32);
    $expiration_time = $this->time->getRequestTime() + $this->configHelper->getProxyTicketTimeout();

    $pt = new ProxyTicket($id, $expiration_time, $session, $uid, $name, $service_string, $renew, $proxy_chain);
    $event = new CasServerTicketAlterEvent($pt);
    $this->eventDispatcher->dispatch(CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT, $event);
    $this->ticketStore->storeProxyTicket($pt);

    return $pt;
  }

  /**
   * Create a ticket granting ticket.
   *
   * @return TicketGrantingTicket
   *   The created and saved TicketGrantingTicket.
   */
  public function createTicketGrantingTicket() {
    $id = 'TGT-';
    $id .= Crypt::randomBytesBase64(32);
    $expiration_time = $this->time->getRequestTime() + $this->configHelper->getTicketGrantingTicketTimeout();
    $session = Crypt::hashBase64($this->sessionManager->getId());
    $uid = \Drupal::currentUser()->id();
    $name = $this->getUsernameAttribute(\Drupal::currentUser());

    $tgt = new TicketGrantingTicket($id, $expiration_time, $session, $uid, $name);
    $event = new CasServerTicketAlterEvent($tgt);
    $this->eventDispatcher->dispatch(CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT, $event);
    $this->ticketStore->storeTicketGrantingTicket($tgt);

    return $tgt;
  }

  /**
   * Get the username for a ticket.
   *
   * @param AccountInterface $account
   *   The account to get the username for.
   *
   * @return string
   *   The username.
   */
  public function getUsernameAttribute(AccountInterface $account) {
    if ($this->configHelper->getTicketUsernameAttribute() == 'mail') {
      $name = $account->getEmail();
    }
    elseif ($this->configHelper->getTicketUsernameAttribute() == 'uid') {
      $name = $account->id();
    }
    else {
      $name = $account->getAccountName();
    }

    return $name;
  }

}
